// This file is auto-generated by @hey-api/openapi-ts

export const $BinType = {
    type: 'string',
    enum: ['household_waste', 'recycling', 'garden_waste'],
    title: 'BinType'
} as const;

export const $Body_login_access_token_api_v1_login_access_token_post = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_access_token_api_v1_login_access_token_post'
} as const;

export const $CollectionCreate = {
    properties: {
        bin_type: {
            '$ref': '#/components/schemas/BinType'
        },
        collection_date: {
            type: 'string',
            format: 'date-time',
            title: 'Collection Date'
        },
        notification_sent: {
            type: 'boolean',
            title: 'Notification Sent',
            default: false
        }
    },
    type: 'object',
    required: ['bin_type', 'collection_date'],
    title: 'CollectionCreate'
} as const;

export const $CollectionPublic = {
    properties: {
        bin_type: {
            '$ref': '#/components/schemas/BinType'
        },
        collection_date: {
            type: 'string',
            format: 'date-time',
            title: 'Collection Date'
        },
        notification_sent: {
            type: 'boolean',
            title: 'Notification Sent',
            default: false
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['bin_type', 'collection_date', 'id', 'user_id'],
    title: 'CollectionPublic'
} as const;

export const $CollectionUpdate = {
    properties: {
        bin_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BinType'
                },
                {
                    type: 'null'
                }
            ]
        },
        collection_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Collection Date'
        },
        notification_sent: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notification Sent'
        }
    },
    type: 'object',
    title: 'CollectionUpdate'
} as const;

export const $CollectionsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CollectionPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'CollectionsPublic'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $Message = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const $PreferredContactMethod = {
    type: 'string',
    enum: ['email', 'sms'],
    title: 'PreferredContactMethod'
} as const;

export const $ReminderTime = {
    type: 'string',
    enum: ['1_hour', '2_hours', '12_hours', '24_hours', '48_hours'],
    title: 'ReminderTime'
} as const;

export const $Token = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const $UpdatePassword = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 255,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 255,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const $UserPublic = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        phone_number: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 15
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone Number'
        },
        preferred_contact_method: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PreferredContactMethod'
                }
            ],
            default: 'email'
        },
        address: {
            type: 'string',
            maxLength: 255,
            title: 'Address'
        },
        collection_url: {
            type: 'string',
            title: 'Collection Url'
        },
        reminder_time: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ReminderTime'
                }
            ],
            default: '24_hours'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        next_scrape_date: {
            type: 'string',
            format: 'date-time',
            title: 'Next Scrape Date'
        }
    },
    type: 'object',
    required: ['name', 'email', 'collection_url', 'id', 'next_scrape_date'],
    title: 'UserPublic'
} as const;

export const $UserRegister = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        phone_number: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 15
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone Number'
        },
        preferred_contact_method: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PreferredContactMethod'
                }
            ],
            default: 'email'
        },
        address: {
            type: 'string',
            maxLength: 255,
            title: 'Address'
        },
        collection_url: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 511
                },
                {
                    type: 'null'
                }
            ],
            title: 'Collection Url'
        },
        reminder_time: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ReminderTime'
                }
            ],
            default: '24_hours'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        password: {
            type: 'string',
            maxLength: 255,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['name', 'email', 'password'],
    title: 'UserRegister'
} as const;

export const $UserUpdateMe = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone_number: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 15
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone Number'
        },
        preferred_contact_method: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PreferredContactMethod'
                },
                {
                    type: 'null'
                }
            ]
        },
        address: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        collection_url: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 511
                },
                {
                    type: 'null'
                }
            ],
            title: 'Collection Url'
        },
        reminder_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReminderTime'
                },
                {
                    type: 'null'
                }
            ]
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;