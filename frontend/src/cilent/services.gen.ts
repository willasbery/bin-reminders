// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginAccessTokenApiV1LoginAccessTokenPostData, LoginAccessTokenApiV1LoginAccessTokenPostResponse, ReadUserMeApiV1UsersMeGetResponse, DeleteUserMeApiV1UsersMeDeleteResponse, UpdateUserMeApiV1UsersMePatchData, UpdateUserMeApiV1UsersMePatchResponse, UpdatePasswordMeApiV1UsersMePasswordPatchData, UpdatePasswordMeApiV1UsersMePasswordPatchResponse, RegisterUserApiV1UsersSignupPostData, RegisterUserApiV1UsersSignupPostResponse, ReadUserByIdApiV1UsersUserIdGetData, ReadUserByIdApiV1UsersUserIdGetResponse, GetNextCollectionsApiV1CollectionsMeGetResponse, GetCollectionsApiV1CollectionsUserIdGetData, GetCollectionsApiV1CollectionsUserIdGetResponse, GetCollectionApiV1CollectionsCollectionIdGetData, GetCollectionApiV1CollectionsCollectionIdGetResponse, UpdateCollectionApiV1CollectionsCollectionIdPatchData, UpdateCollectionApiV1CollectionsCollectionIdPatchResponse, DeleteCollectionApiV1CollectionsCollectionIdDeleteData, DeleteCollectionApiV1CollectionsCollectionIdDeleteResponse, CreateCollectionApiV1CollectionsPostData, CreateCollectionApiV1CollectionsPostResponse } from './types.gen';

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginAccessTokenApiV1LoginAccessTokenPost = (data: LoginAccessTokenApiV1LoginAccessTokenPostData): CancelablePromise<LoginAccessTokenApiV1LoginAccessTokenPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/login/access-token',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read User Me
 * Get current user.
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const readUserMeApiV1UsersMeGet = (): CancelablePromise<ReadUserMeApiV1UsersMeGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/me'
}); };

/**
 * Delete User Me
 * Delete own user.
 * @returns Message Successful Response
 * @throws ApiError
 */
export const deleteUserMeApiV1UsersMeDelete = (): CancelablePromise<DeleteUserMeApiV1UsersMeDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/users/me'
}); };

/**
 * Update User Me
 * Update own user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const updateUserMeApiV1UsersMePatch = (data: UpdateUserMeApiV1UsersMePatchData): CancelablePromise<UpdateUserMeApiV1UsersMePatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Password Me
 * Update own password.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const updatePasswordMeApiV1UsersMePasswordPatch = (data: UpdatePasswordMeApiV1UsersMePasswordPatchData): CancelablePromise<UpdatePasswordMeApiV1UsersMePasswordPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me/password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Register User
 * Create new user without the need to be logged in.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const registerUserApiV1UsersSignupPost = (data: RegisterUserApiV1UsersSignupPostData): CancelablePromise<RegisterUserApiV1UsersSignupPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/users/signup',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read User By Id
 * Get a specific user by id.
 * @param data The data for the request.
 * @param data.userId
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const readUserByIdApiV1UsersUserIdGet = (data: ReadUserByIdApiV1UsersUserIdGetData): CancelablePromise<ReadUserByIdApiV1UsersUserIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/{user_id}',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Next Collections
 * Get the next bin collections for the user
 * @returns CollectionsPublic Successful Response
 * @throws ApiError
 */
export const getNextCollectionsApiV1CollectionsMeGet = (): CancelablePromise<GetNextCollectionsApiV1CollectionsMeGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/collections/me'
}); };

/**
 * Get Collections
 * Get all collections for a user
 * @param data The data for the request.
 * @param data.userId
 * @returns CollectionsPublic Successful Response
 * @throws ApiError
 */
export const getCollectionsApiV1CollectionsUserIdGet = (data: GetCollectionsApiV1CollectionsUserIdGetData): CancelablePromise<GetCollectionsApiV1CollectionsUserIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/collections/{user_id}',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Collection
 * Get a collection by id
 * @param data The data for the request.
 * @param data.collectionId
 * @returns CollectionPublic Successful Response
 * @throws ApiError
 */
export const getCollectionApiV1CollectionsCollectionIdGet = (data: GetCollectionApiV1CollectionsCollectionIdGetData): CancelablePromise<GetCollectionApiV1CollectionsCollectionIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/collections/{collection_id}',
    path: {
        collection_id: data.collectionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Collection
 * Update a collection
 * @param data The data for the request.
 * @param data.collectionId
 * @param data.requestBody
 * @returns CollectionPublic Successful Response
 * @throws ApiError
 */
export const updateCollectionApiV1CollectionsCollectionIdPatch = (data: UpdateCollectionApiV1CollectionsCollectionIdPatchData): CancelablePromise<UpdateCollectionApiV1CollectionsCollectionIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/collections/{collection_id}',
    path: {
        collection_id: data.collectionId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Collection
 * Delete a collection
 * @param data The data for the request.
 * @param data.collectionId
 * @returns Message Successful Response
 * @throws ApiError
 */
export const deleteCollectionApiV1CollectionsCollectionIdDelete = (data: DeleteCollectionApiV1CollectionsCollectionIdDeleteData): CancelablePromise<DeleteCollectionApiV1CollectionsCollectionIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/collections/{collection_id}',
    path: {
        collection_id: data.collectionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Collection
 * Create a new collection
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CollectionPublic Successful Response
 * @throws ApiError
 */
export const createCollectionApiV1CollectionsPost = (data: CreateCollectionApiV1CollectionsPostData): CancelablePromise<CreateCollectionApiV1CollectionsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/collections/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };